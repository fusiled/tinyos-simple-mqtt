#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Lightweight Publish-Subscribe Application Protocol
\end_layout

\begin_layout Author
Matteo M.
 Fusi, Paolo Mosca
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction and General Informations
\end_layout

\begin_layout Subsection
Purpose of the Document
\end_layout

\begin_layout Standard
This document is part of the project of the 
\emph on
Internet of Things 
\emph default
course at Politecnico di Milano for the Academic Year 2016/2017.
 This document is associated to the source code at the link 
\begin_inset CommandInset href
LatexCommand href
name "https://github.com/fusiled/tinyos-simple-mqtt"
target "https://github.com/fusiled/tinyos-simple-mqtt"

\end_inset

.
\end_layout

\begin_layout Subsection
Essential Informations
\end_layout

\begin_layout Standard
The project is written with the TinyOS framework.
 We developed two kinds of nodes that must be run in Cooja simulation environmen
t: 
\series bold
\emph on
PanC
\series default
 
\emph default
is the PAN Coordinator and 
\series bold
\emph on
NodeC
\series default
\emph default
 is responsbile of collecting measurements and sending them to the PAN Coordinat
or.
 
\emph on
NodeC 
\emph default
components can send/receive messages to/from 
\emph on
PanC
\emph default
.
 There can be only one 
\emph on
PanC 
\emph default
in the network and up to 8 
\emph on
NodeC 
\emph default
components.
 How the two components are wired and structured is described in the section
 named 
\emph on
Description of the Components
\emph default
.
\end_layout

\begin_layout Subsubsection

\emph on
TOS_NODE_ID and Address Layout
\end_layout

\begin_layout Standard

\emph on
PanC 
\emph default
\bar under
must
\bar default
 have 
\emph on
ActiveMessageAddressC__addr 
\emph default
set to 9.
 
\emph on
NodeC 
\emph default
components rely on this information when they have someting to send.
 
\emph on
TOS_NODE_ID
\emph default
 can have any value 
\begin_inset Formula $\geq8$
\end_inset

.
 
\emph on
NodeC 
\emph default
components has a 
\emph on
TOS_NODE_ID
\emph default
 in the range 
\begin_inset Formula $[1;8]$
\end_inset

 and they have 
\emph on
ActiveMessageAddressC__addr 
\emph default
equal
\emph on
 to TOS_NODE_ID.
 
\emph default
Every message has a 
\emph on
node_id 
\emph default
field attached to it and the meaning changes on the message_type (See 
\emph on
Layout of the Messages 
\emph default
for further details).
 
\emph on
node_id 
\emph default
is set in messages as 
\emph on
TOS_NODE_ID-1.
 
\emph default
With this method it is possible to save 1 bit in the 
\emph on
node_id 
\emph default
field of the messages.
 The method of how to properly set the 
\emph on
TOS_NODE_ID 
\emph default
symbols is described in 
\emph on
Simulation Environment
\emph default
 section.
 
\end_layout

\begin_layout Section
Description of the Components
\end_layout

\begin_layout Standard
There are two approaches to handle messages: one it is based on timeout
 and it's used with 
\emph on
connect/connack 
\emph default
and 
\emph on
subscribe/suback
\emph default
 messages and the other uses a resend buffer when a send fails for some
 reason.
 The first method is ok for simple send-and-ack messages (like, in fact,
 connect and subscribe message sequences): we don't have any kind of timing
 constraints, so it's tolerable to connect a node not immediatly or know
 which topics a node is interested.
 What we wanted was to ensure that informations (the measurements) arrived
 at their destination, because they're the most important data in the network.
 That's why we implemented the resend buffer: to ensure that surely 
\emph on
publish 
\emph default
messages will arrive to thei destination.
\end_layout

\begin_layout Subsection
Node
\end_layout

\begin_layout Standard
A Node can send only 
\emph on
connect,subscribe,publish 
\emph default
and 
\emph on
puback 
\emph default
messages.
 For the sake of simplicity, interested topics and QOS of the topics are
 hardcoded and are based on the 
\emph on
NODE_ID 
\emph default
of the node.
\end_layout

\begin_layout Paragraph
The State Machine
\end_layout

\begin_layout Standard
A node has a state variable (called 
\emph on
state
\emph default
) which controls the behaviour of the component.
 If 
\emph on
state 
\emph default
is set to:
\end_layout

\begin_layout Description

\emph on
NODE_STATE_CONNECTING 
\emph default
The node can only try to connect to PAN Coordinator.
 Other operations are not possible
\end_layout

\begin_layout Description

\emph on
NODE_STATE_SUBSCRIBING 
\emph default
The node has received 
\emph on
connack.
 
\emph default
Now it's sending the 
\emph on
subscribe 
\emph default
message and/or is waiting for the 
\emph on
suback.
 
\emph default
In this state the node can collect measurements and publish them.
\end_layout

\begin_layout Description

\series bold
\emph on
NODE_STATE_PUBLISHING 
\series default
\emph default
The node has received the 
\emph on
suback.
 
\emph default
The node now must only collect and publish measurements.
\end_layout

\begin_layout Standard
The behaviour is briefly explained by the following finite state machine:
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/node_state_diagram.png
	width 8cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Control State Machine of a Node
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph

\emph on
connect 
\emph default
and 
\emph on
subscribe 
\emph default
handling
\end_layout

\begin_layout Standard
These two messages are controlled by a timeout timer: when there's an attempt
 to send one of these messages a timer is started.
 If i don't receive the realted ack (a 
\emph on
connack 
\emph default
or a 
\emph on
suback
\emph default
)
\emph on
, 
\emph default
then the node will try to send another message of the same kind.
 Note that 
\emph on
PacketAcknowledgment.requestAck 
\emph default
call is not needed.
\end_layout

\begin_layout Paragraph

\emph on
publish 
\emph default
and 
\emph on
puback
\emph default
 handling
\end_layout

\begin_layout Standard
They use a different mechanism: at first there's an attempt to send the
 message, if the sending procedure fails for some reason (the network component
 is busy or the ack set by the 
\emph on
PacketAcknowledgment 
\emph default
interface is not received when QOS=1), then the message is stored into a
 resend buffer that it's a simple queue.
 This resend buffer try to send a message every 
\emph on
RESEND_DELTA_TIME 
\emph default
milliseconds
\emph on
.
 
\emph default
If the buffer is full then a packet is discarded, so it's important that
 the parameters of the buffer are well-sized.
 If the resend buffer fails to send a message, then this message is put
 at the tail of the queue.
\end_layout

\begin_layout Paragraph
Collecting measurements and sending them
\end_layout

\begin_layout Standard
The node implements a timer which triggers periodically every 
\emph on
SENSOR_PERIOD
\emph default
 seconds.
 When the time triggers one of the three sensors is selected and the related
 command needed to fetch the measurement is called.
 The three possible type of measurements are temperature, humidity and luminosit
y.
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/sensor_read.png
	width 14cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Sequence Diagram of the Collection and Sending of a measurement
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
PAN Coordinator
\end_layout

\begin_layout Standard
PAN Coordinator is a passive agent because it acts only when it receive
 a message.
\end_layout

\begin_layout Paragraph

\emph on
connect 
\emph default
and 
\emph on
subscribe 
\emph default
handling
\end_layout

\begin_layout Standard
When the PAN Coordinator receives a 
\emph on
connect 
\emph default
it marks the node who sent the 
\emph on
connect 
\emph default
as active (it keeps an array of boolean to keep the in memory the state
 of every node) and replies with a 
\emph on
connack
\emph default
.
 The same methodolgy is used with 
\emph on
subscribe 
\emph default
messages but the node saves the topic in which a node is interested and
 the associated QOSs.
 The peculiarity is that the PAN Coordinator acts lazy when it must reply
 to
\emph on
 connect 
\emph default
and 
\emph on
subscribe 
\emph default
messages: if the PAN Coordinator can't send 
\emph on
connack 
\emph default
or 
\emph on
suback 
\emph default
the it just fails and it will do nothing.
 The PAN Coordinator will try to resend another 
\emph on
connack 
\emph default
or 
\emph on
suback 
\emph default
when the node who has not received the associated ack message will resend
 the 
\emph on
connect 
\emph default
or the 
\emph on
subscribe
\emph default
 because the timeout associated is expired.
\end_layout

\begin_layout Paragraph

\emph on
publish 
\emph default
and 
\emph on
puback 
\emph default
handling
\end_layout

\begin_layout Standard
When the PAN Coordinator receives a 
\emph on
publish
\emph default
 it replies immediatly with e 
\emph on
puback 
\emph default
and it forward the 
\emph on
publish 
\emph default
to all the interested nodes.
 It uses 
\emph on
PacketAcknowledgment.requestAck 
\emph default
in case the destination of the nodes required QOS=1 for the topic of the
 inquiring 
\emph on
publish
\emph default
.
 If one of the messages cited fails then it is put in a resend buffer which
 acts exactly like described in the Node section: it tries to send the element
 in its queue every 
\emph on
RESEND_DELTA_TIME 
\emph default
milliseconds.
 
\emph on
PacketAcknowledgment.requestAck 
\emph default
in case QOS=1 guarantees that the packets are received by the destination
 node and the mechanism helps to know if we must retransmit the message
 without complex mechanism: if the ack is not received, then resend.
\end_layout

\begin_layout Section
Messages
\end_layout

\begin_layout Subsection
Layout of the Messages
\end_layout

\begin_layout Standard
The messages have been designed in order to be as small as possible.
 The structures and the functions realted to messages are contained in the
 source file 
\emph on
commons/Commons.h.
 
\emph default
What and when a message is sent is descibed in the section named 
\emph on
The Implemented Publish-Subscribe Mechanism
\emph default
.
 Two fields are common in every type of message and their size and positioning
 in the message layout is fixed:
\end_layout

\begin_layout Description
code_id It is a 3bit field.
 It occupies the 3 less significant bits.
 This field contains a code that identifies the message.
\end_layout

\begin_layout Description
node_id It is a 3bit filed.
 It occupied the 3 less significant bts after the 
\emph on
code_id 
\emph default
field.
 This filed contains a node_id.
 It is usually identifies the source of a message if sent from a 
\emph on
NodeC 
\emph default
components.
 If a message is sent from the 
\emph on
PanC 
\emph default
module, then it identifies the destination of the message, but when the
 mesaage is a publish then it contains the id of the node who published.
\end_layout

\begin_layout Paragraph
CONNECT
\end_layout

\begin_layout Standard
The 
\emph on
code_id 
\emph default
is
\emph on
 1.
 
\emph default
It is 8 bits big.
 It has not any other field other than 
\emph on
node_id 
\emph default
and 
\emph on
code_id.
 
\emph default
The 
\emph on
node_id 
\emph default
tells to then PAN Coordinator which node requested a connection.
\end_layout

\begin_layout Paragraph
CONNACK
\end_layout

\begin_layout Standard
The 
\emph on
code_id 
\emph default
is
\emph on
 2.
 
\emph default
It is 8 bits big.
 It has not any other field other than 
\emph on
node_id 
\emph default
and 
\emph on
code_id.
 
\emph default
The 
\emph on
node_id 
\emph default
tells to which node the 
\emph on
connack 
\emph default
message is destined.
\end_layout

\begin_layout Paragraph
PUBLISH
\end_layout

\begin_layout Standard
The 
\emph on
code_id 
\emph default
is
\emph on
 3.
 
\emph default
It is 32 bits big.
 The other fields after 
\emph on
node_id 
\emph default
and 
\emph on
code_id 
\emph default
are
\emph on
:
\end_layout

\begin_layout Description

\emph on
publish_topic 
\emph default
This field is 2 bits big.
 It identifies the topic of the publish: 0 is temperature, 1 is humidity
 and 2 is luminosity.
\end_layout

\begin_layout Description

\series bold
\emph on
publish_id
\series default
 
\emph default
This field is 8 bits big.
 It uniquely identify a publish.
 The range of the ids is limited, but we assume that it's not possible that
 there are in the network 2 messages with the same id at the same time.
 This id is used to match 
\emph on
publish 
\emph default
with related 
\emph on
puback 
\emph default
messages.
\end_layout

\begin_layout Description

\emph on
publish_qos 
\emph default
This field is 1 bit big.
 If the source of the message is 
\emph on
NodeC
\emph default
, then it tells to PAN Coordinator if send a 
\emph on
puback 
\emph default
or not.
 If the source of the message is 
\emph on
PanC
\emph default
, then it is the qos related to 
\emph on
publish_topic 
\emph default
of the destination 
\emph on
NodeC 
\emph default
specified previously int the 
\emph on
subscribe 
\emph default
message.
\end_layout

\begin_layout Description

\emph on
publish_payload 
\emph default
This field is 15 bits big.
 It's the value of the collected measure.
\end_layout

\begin_layout Paragraph
PUBACK
\end_layout

\begin_layout Standard
The 
\emph on
code_id 
\emph default
is
\emph on
 4.
 
\emph default
It is 16 bits big.
 The other fields after 
\emph on
node_id 
\emph default
and 
\emph on
code_id 
\emph default
are
\emph on
:
\end_layout

\begin_layout Description

\emph on
puback_topic 
\emph default
This field is 2 bits big.
 This field contains the topic associated to the related 
\emph on
publish 
\emph default
message.
\end_layout

\begin_layout Description

\emph on
puback_publish_id 
\emph default
This field is 8 bits big.
 This id is used to match 
\emph on
publish 
\emph default
with related 
\emph on
puback 
\emph default
messages.
\end_layout

\begin_layout Paragraph
SUBSCRIBE
\end_layout

\begin_layout Standard
The 
\emph on
code_id 
\emph default
is
\emph on
 5.
 
\emph default
It is 16 bits big.
 The other fields after 
\emph on
node_id 
\emph default
and 
\emph on
code_id 
\emph default
are
\emph on
:
\end_layout

\begin_layout Description

\emph on
topic_mask 
\emph default
This field is 3 bits big.
 This is mask tells to PAN Coordinator if the source of the message is intereste
d or not into a specific topic.
 The least significant bit is associated to temperature, the second least
 significant bit is associated to humidity and the remaining bit is associated
 to luminosity.
 If a bit has value 0, then the node is not interested into a topic, otherwise
 yes.
\end_layout

\begin_layout Description

\emph on
qos_mask 
\emph default
This field is 3 bits big.
 It is composed exactly as the 
\emph on
topic_mask 
\emph default
field, but it expresses how the PAN Coordinator must behave when it sends
 a 
\emph on
publish 
\emph default
to the inquiring node.
\end_layout

\begin_layout Paragraph
SUBACK
\end_layout

\begin_layout Standard
The 
\emph on
code_id 
\emph default
is
\emph on
 6.
 
\emph default
It is 8 bits big.
 It has not any other field other than 
\emph on
node_id 
\emph default
and 
\emph on
code_id.
 
\emph default
The 
\emph on
node_id 
\emph default
tells to which node the 
\emph on
suback 
\emph default
message is destined.
\end_layout

\end_body
\end_document
